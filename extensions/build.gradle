buildscript {
    def ENV = System.getenv()

    Properties databindingProperties = new Properties()
    databindingProperties.load(new FileInputStream("$projectDir/../databinding.properties"))
    Properties buildToolsProperties = new Properties()
    buildToolsProperties.load(new FileInputStream("$projectDir/../../buildSrc/base/version.properties"))

    def runningInIde = project.hasProperty('android.injected.invoked.from.ide')
    // this is done by bazel but if we are in IDE it also configures so we need to distinguish
    def autoConfigured = !gradle.startParameter.getInitScripts().isEmpty() && !runningInIde
    ext.autoConfigured = autoConfigured


    def TOOLS_VERSION = ENV['VERSION'] ?: buildToolsProperties.get("buildVersion")
    def OUT_REPO = ENV['OUT_REPO'] ?: ENV['BUILD_DIR'] ?: []
    def MAVEN_REPO = ENV['MAVEN_REPO']
    def PREBUILTS_REPO = ENV['PREBUILTS_REPO']
    if (runningInIde) {
        Properties devVersions = new Properties()
        devVersions.load(new FileInputStream("$projectDir/../../buildSrc/base/dev-version.properties"))
        // invoked in the IDE, go w/ defaults.
        TOOLS_VERSION = devVersions.buildVersion
        MAVEN_REPO = MAVEN_REPO ?: "${projectDir}/../../../out/repo"
        OUT_REPO = OUT_REPO ?: "${projectDir}/../../../out/repo"
        PREBUILTS_REPO = PREBUILTS_REPO ?: "${projectDir}/../../../prebuilts/maven_repo/android"
    } else if (autoConfigured) {
        if (TOOLS_VERSION == null || OUT_REPO == null) {
            throw new GradleException("""must set the following env variables:
                    VERSION:$TOOLS_VERSION // tools build version
                    OUT_REPO:$OUT_REPO // maven repo to upload artifacts""")
        }
    } else if (TOOLS_VERSION == null
            || MAVEN_REPO == null
            || OUT_REPO == null
            || PREBUILTS_REPO == null) {
        throw new GradleException("""must set the following env variables:
                        VERSION:$TOOLS_VERSION // tools build version
                        MAVEN_REPO:$MAVEN_REPO // maven repo for ToT tools build
                        OUT_REPO:$OUT_REPO // maven repo to upload artifacts
                        PREBUILTS_REPO:$PREBUILTS_REPO // prebuilts repo to fix support library dependencies""")
    }

    databindingProperties.version = TOOLS_VERSION
    databindingProperties.androidPluginVersion = TOOLS_VERSION
    databindingProperties.compileSdkVersion = Integer.parseInt(databindingProperties.compileSdkVersionStr)

    databindingProperties.maven = [:]
    if (autoConfigured) {
        // bazel build
        databindingProperties.maven.out_repo = new File(OUT_REPO, "local_repo").getAbsolutePath()
        databindingProperties.maven.zip_out = new File(OUT_REPO, "local_repo_zip")
    } else {
        // gradle build
        databindingProperties.maven.out_repo = new File(OUT_REPO).getAbsolutePath()
        databindingProperties.maven.tools_repo = file(MAVEN_REPO).getAbsolutePath()
        databindingProperties.maven.prebuilts_repo = file(PREBUILTS_REPO).getAbsolutePath()
    }
    ext.dataBindingConfig = databindingProperties
    def supportLibVersion = "26.0.2"
    ext.libs = [:]
    ext.libs.android_support_core_utils = "com.android.support:support-core-utils:$supportLibVersion"
    ext.libs.android_support_cardview_v7 = "com.android.support:cardview-v7:$supportLibVersion"
    ext.libs.android_support_appcompat_v7 = "com.android.support:appcompat-v7:$supportLibVersion"

    dependencies {
        classpath "com.android.tools.build:gradle:$TOOLS_VERSION"
    }

    if (!autoConfigured) {
        repositories {
            maven {
                url = dataBindingConfig.maven.tools_repo
            }
            maven {
                url = dataBindingConfig.maven.prebuilts_repo
            }
        }
    }
}

subprojects {
    def ENV = System.getenv()
    if (ENV['BUILD_DIR'] != null) {
        buildDir = new File(ENV['BUILD_DIR'], "$name-build")
    }
    apply plugin: 'maven'
    group = dataBindingConfig.group
    version = dataBindingConfig.version
    if (!autoConfigured) {
        repositories {
            maven {
                url = dataBindingConfig.maven.tools_repo
            }
            maven {
                url = dataBindingConfig.maven.prebuilts_repo
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "file://${dataBindingConfig.maven.out_repo}")
            }
        }
    }
}

task createArchive(type: Zip) {
    description "Creates a maven repository that includes just the libraries compiled in this" +
            " project, without any history from prebuilts."
    from dataBindingConfig.maven.out_repo
    destinationDir dataBindingConfig.maven.zip_out
    baseName = "dataBindingRuntimeRepo"
}

subprojects {
    createArchive.dependsOn tasks['uploadArchives']
}
