/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'application'
mainClassName = "android.databinding.AndroidDataBinding"
sourceCompatibility = 1.8

dependencies {
    testCompile libs.junit
    compile libs.jcommander
    compileOnly project(':dataBinding:compiler')
}

compileJava {
    options.compilerArgs += ["-proc:none"]
}
run {
    if ( project.hasProperty("appArgs") ) {
        args Eval.me(appArgs)
    }
}

def jarName = "android-data-binding"
def workingDir = "${project.buildDir}/intermediates/fullJar"
def fatJar = "${workingDir}/${jarName}-fat.jar"
def jarJar = project.jar.archivePath
configurations {
    jarJarArchives
}

def sourcesJarTask = project.tasks.create(name: "sourceJar", type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts.add('archives', sourcesJarTask);


tasks.create(name: 'fatJar', type: Jar) {
    baseName = jarName + '-fat'
    doFirst {
        file(workingDir).mkdirs()
    }
    def deps = new HashSet<ResolvedDependency>()
    project.configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each {
        deps.addAll(it.allModuleArtifacts)
    }
    from { deps.findAll {true }.collect {
        it.file.isDirectory() ? it.file : project.zipTree(it.file)
    } } {
        exclude "META-INF/maven/**"
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/LICENSE.txt"
        exclude "META-INF/NOTICE.txt"
        exclude "**/*.stg"
    }
    archiveName "${baseName}.jar"
    destinationDir = new File(workingDir)
    with project.jar
    doLast {
        println "created fat jar into ${destinationDir}"
    }
}

tasks.create(name: 'jarJarFile') {
        dependsOn 'fatJar'
        dependsOn project.jar
        def inputLibrary = fatJar
        def outputLibrary = jarJar
        inputs.file(inputLibrary)
        outputs.file(outputLibrary)

        doLast {
            def jarJarLibrary = new File(dataBindingConfig.externalPrebuiltsBase,
                    'tools/common/m2/repository/com/googlecode/jarjar/jarjar/1.3/jarjar-1.3.jar').
                    getCanonicalPath()
            // in Ant
            ant.taskdef(name: "jarjarIt",
                    classname: 'com.tonicsystems.jarjar.JarJarTask',
                    classpath: jarJarLibrary)
            // start jarjar task
            ant.jarjarIt(jarfile: outputLibrary) {
                // input is our inputLibrary
                zipfileset(src: inputLibrary)
                // rule to repackage antlr to new package
                rule pattern: 'org.antlr.**', result: 'com.android.repacked.antlr.@1'
                rule pattern: 'com.tunnelvisionlabs.**', result: 'com.android.repacked.tunnelvision.@1'
                rule pattern: 'org.abego.treelayout.**', result: 'com.android.repacked.treelayout.@1'
                // rule to repackage commons
                rule pattern: 'org.apache.**', result: 'com.android.repacked.apache.@1'
                rule pattern: 'kotlin.**', result: 'com.android.repacked.kotlin.@1'
                // rule for google
                rule pattern: 'com.google.**', result: 'com.android.repacked.google.@1'
                rule pattern: 'org.mozilla.**', result: 'com.google.repacked.org.mozilla.@1'
                rule pattern: 'org.stringtemplate.**', result: 'com.google.repacked.org.stringtemplate.@1'
            }
        }
    }
